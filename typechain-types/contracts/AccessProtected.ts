/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface AccessProtectedInterface extends utils.Interface {
  functions: {
    "isAdmin(address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isAdmin" | "setAdmin"): FunctionFragment;

  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;

  events: {
    "AdminAccessSet(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAccessSet"): EventFragment;
}

export interface AdminAccessSetEventObject {
  _admin: string;
  _enabled: boolean;
}
export type AdminAccessSetEvent = TypedEvent<
  [string, boolean],
  AdminAccessSetEventObject
>;

export type AdminAccessSetEventFilter = TypedEventFilter<AdminAccessSetEvent>;

export interface AccessProtected extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccessProtectedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isAdmin(
      _addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<boolean>;

  setAdmin(
    admin: string,
    isEnabled: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    isAdmin(
      _addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminAccessSet(address,bool)"(
      _admin?: string | null,
      _enabled?: null
    ): AdminAccessSetEventFilter;
    AdminAccessSet(
      _admin?: string | null,
      _enabled?: null
    ): AdminAccessSetEventFilter;
  };

  estimateGas: {
    isAdmin(
      _addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    isAdmin(
      _addressToCheck: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
