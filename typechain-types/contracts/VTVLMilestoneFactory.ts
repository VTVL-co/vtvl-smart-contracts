/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export type InputMilestoneStruct = {
  percent: BigNumberish;
  period: BigNumberish;
  releaseIntervalSecs: BigNumberish;
};

export type InputMilestoneStructOutput = [number, BigNumber, BigNumber] & {
  percent: number;
  period: BigNumber;
  releaseIntervalSecs: BigNumber;
};

export interface VTVLMilestoneFactoryInterface extends utils.Interface {
  functions: {
    "createSimpleMilestones(address,uint256,uint256[],address[])": FunctionFragment;
    "createVestingMilestone(address,uint256,(uint8,uint128,uint120)[],address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSimpleMilestones"
      | "createVestingMilestone"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSimpleMilestones",
    values: [string, BigNumberish, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingMilestone",
    values: [string, BigNumberish, InputMilestoneStruct[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSimpleMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVestingMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreateMilestoneContract(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateMilestoneContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CreateMilestoneContractEventObject {
  milestoneAddress: string;
  creator: string;
}
export type CreateMilestoneContractEvent = TypedEvent<
  [string, string],
  CreateMilestoneContractEventObject
>;

export type CreateMilestoneContractEventFilter =
  TypedEventFilter<CreateMilestoneContractEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VTVLMilestoneFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTVLMilestoneFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSimpleMilestones(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _allocationPercents: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createVestingMilestone(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _milestones: InputMilestoneStruct[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  createSimpleMilestones(
    _tokenAddress: string,
    _allocation: BigNumberish,
    _allocationPercents: BigNumberish[],
    _recipients: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createVestingMilestone(
    _tokenAddress: string,
    _allocation: BigNumberish,
    _milestones: InputMilestoneStruct[],
    _recipients: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSimpleMilestones(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _allocationPercents: BigNumberish[],
      _recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    createVestingMilestone(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _milestones: InputMilestoneStruct[],
      _recipients: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CreateMilestoneContract(address,address)"(
      milestoneAddress?: string | null,
      creator?: null
    ): CreateMilestoneContractEventFilter;
    CreateMilestoneContract(
      milestoneAddress?: string | null,
      creator?: null
    ): CreateMilestoneContractEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    createSimpleMilestones(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _allocationPercents: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createVestingMilestone(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _milestones: InputMilestoneStruct[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSimpleMilestones(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _allocationPercents: BigNumberish[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createVestingMilestone(
      _tokenAddress: string,
      _allocation: BigNumberish,
      _milestones: InputMilestoneStruct[],
      _recipients: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
