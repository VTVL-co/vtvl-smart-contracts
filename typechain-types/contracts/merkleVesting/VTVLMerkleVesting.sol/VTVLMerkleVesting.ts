/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type ClaimInputStruct = {
  startTimestamp: BigNumberish;
  endTimestamp: BigNumberish;
  cliffReleaseTimestamp: BigNumberish;
  releaseIntervalSecs: BigNumberish;
  scheduleIndex: BigNumberish;
  linearVestAmount: BigNumberish;
  cliffAmount: BigNumberish;
  recipient: string;
};

export type ClaimInputStructOutput = [
  number,
  number,
  number,
  number,
  number,
  BigNumber,
  BigNumber,
  string
] & {
  startTimestamp: number;
  endTimestamp: number;
  cliffReleaseTimestamp: number;
  releaseIntervalSecs: number;
  scheduleIndex: number;
  linearVestAmount: BigNumber;
  cliffAmount: BigNumber;
  recipient: string;
};

export declare namespace VTVLMerkleVesting {
  export type ClaimStruct = {
    amountWithdrawn: BigNumberish;
    deactivationTimestamp: BigNumberish;
  };

  export type ClaimStructOutput = [BigNumber, BigNumber] & {
    amountWithdrawn: BigNumber;
    deactivationTimestamp: BigNumber;
  };
}

export interface VTVLMerkleVestingInterface extends utils.Interface {
  functions: {
    "amountAvailableToWithdrawByAdmin()": FunctionFragment;
    "claimableAmount((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address))": FunctionFragment;
    "feePercent()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "finalClaimableAmount((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address))": FunctionFragment;
    "finalVestedAmount((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address))": FunctionFragment;
    "getClaim(address,uint256)": FunctionFragment;
    "getLeaf((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address))": FunctionFragment;
    "isRevoked(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeClaim((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address),bytes32[])": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32)": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "totalWithdrawnAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeReceiver(address)": FunctionFragment;
    "updateconversionThreshold(uint256)": FunctionFragment;
    "verify(bytes32[],bytes32)": FunctionFragment;
    "vestedAmount((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address),uint40)": FunctionFragment;
    "withdraw((uint40,uint40,uint40,uint40,uint40,uint256,uint256,address),bytes32[])": FunctionFragment;
    "withdrawAdmin(uint256)": FunctionFragment;
    "withdrawOtherToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountAvailableToWithdrawByAdmin"
      | "claimableAmount"
      | "feePercent"
      | "feeReceiver"
      | "finalClaimableAmount"
      | "finalVestedAmount"
      | "getClaim"
      | "getLeaf"
      | "isRevoked"
      | "owner"
      | "renounceOwnership"
      | "revokeClaim"
      | "setFee"
      | "setMerkleRoot"
      | "tokenAddress"
      | "totalWithdrawnAmount"
      | "transferOwnership"
      | "updateFeeReceiver"
      | "updateconversionThreshold"
      | "verify"
      | "vestedAmount"
      | "withdraw"
      | "withdrawAdmin"
      | "withdrawOtherToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountAvailableToWithdrawByAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [ClaimInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalClaimableAmount",
    values: [ClaimInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "finalVestedAmount",
    values: [ClaimInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaim",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaf",
    values: [ClaimInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevoked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeClaim",
    values: [ClaimInputStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawnAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeReceiver",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateconversionThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedAmount",
    values: [ClaimInputStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [ClaimInputStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOtherToken",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountAvailableToWithdrawByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLeaf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRevoked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawnAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateconversionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOtherToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminWithdrawn(address,uint256)": EventFragment;
    "ClaimRevoked(address,uint256,uint256,(uint40,uint40,uint40,uint40,uint40,uint256,uint256,address),uint256)": EventFragment;
    "Claimed(address,uint256,uint256)": EventFragment;
    "FeeReceived(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AdminWithdrawnEventObject {
  _recipient: string;
  _amountRequested: BigNumber;
}
export type AdminWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  AdminWithdrawnEventObject
>;

export type AdminWithdrawnEventFilter = TypedEventFilter<AdminWithdrawnEvent>;

export interface ClaimRevokedEventObject {
  _recipient: string;
  _numTokensWithheld: BigNumber;
  revocationTimestamp: BigNumber;
  _claimInput: ClaimInputStructOutput;
  _scheduleIndex: BigNumber;
}
export type ClaimRevokedEvent = TypedEvent<
  [string, BigNumber, BigNumber, ClaimInputStructOutput, BigNumber],
  ClaimRevokedEventObject
>;

export type ClaimRevokedEventFilter = TypedEventFilter<ClaimRevokedEvent>;

export interface ClaimedEventObject {
  _recipient: string;
  _withdrawalAmount: BigNumber;
  _scheduleIndex: BigNumber;
}
export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface FeeReceivedEventObject {
  _recipient: string;
  _feeAmount: BigNumber;
  _scheduleIndex: BigNumber;
  _tokenAddress: string;
}
export type FeeReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  FeeReceivedEventObject
>;

export type FeeReceivedEventFilter = TypedEventFilter<FeeReceivedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VTVLMerkleVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTVLMerkleVestingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountAvailableToWithdrawByAdmin(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    finalClaimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    finalVestedAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaim(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VTVLMerkleVesting.ClaimStructOutput]>;

    getLeaf(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isRevoked(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeClaim(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFee(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateFeeReceiver(
      _newReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateconversionThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    verify(
      proof: BytesLike[],
      leaf: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    vestedAmount(
      _claimInput: ClaimInputStruct,
      _referenceTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  amountAvailableToWithdrawByAdmin(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimableAmount(
    _claimInput: ClaimInputStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feePercent(overrides?: CallOverrides): Promise<BigNumber>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  finalClaimableAmount(
    _claimInput: ClaimInputStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  finalVestedAmount(
    _claimInput: ClaimInputStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaim(
    _recipient: string,
    _scheduleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VTVLMerkleVesting.ClaimStructOutput>;

  getLeaf(
    _claimInput: ClaimInputStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  isRevoked(
    _recipient: string,
    _scheduleIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeClaim(
    _claimInput: ClaimInputStruct,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFee(
    _feePercent: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    _root: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateFeeReceiver(
    _newReceiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateconversionThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  verify(
    proof: BytesLike[],
    leaf: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  vestedAmount(
    _claimInput: ClaimInputStruct,
    _referenceTs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    _claimInput: ClaimInputStruct,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawAdmin(
    _amountRequested: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawOtherToken(
    _otherTokenAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountAvailableToWithdrawByAdmin(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    finalClaimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalVestedAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VTVLMerkleVesting.ClaimStructOutput>;

    getLeaf(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    isRevoked(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeClaim(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(_feePercent: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMerkleRoot(_root: BytesLike, overrides?: CallOverrides): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeReceiver(
      _newReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateconversionThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      proof: BytesLike[],
      leaf: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    vestedAmount(
      _claimInput: ClaimInputStruct,
      _referenceTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminWithdrawn(address,uint256)"(
      _recipient?: string | null,
      _amountRequested?: null
    ): AdminWithdrawnEventFilter;
    AdminWithdrawn(
      _recipient?: string | null,
      _amountRequested?: null
    ): AdminWithdrawnEventFilter;

    "ClaimRevoked(address,uint256,uint256,(uint40,uint40,uint40,uint40,uint40,uint256,uint256,address),uint256)"(
      _recipient?: string | null,
      _numTokensWithheld?: null,
      revocationTimestamp?: null,
      _claimInput?: null,
      _scheduleIndex?: null
    ): ClaimRevokedEventFilter;
    ClaimRevoked(
      _recipient?: string | null,
      _numTokensWithheld?: null,
      revocationTimestamp?: null,
      _claimInput?: null,
      _scheduleIndex?: null
    ): ClaimRevokedEventFilter;

    "Claimed(address,uint256,uint256)"(
      _recipient?: string | null,
      _withdrawalAmount?: null,
      _scheduleIndex?: null
    ): ClaimedEventFilter;
    Claimed(
      _recipient?: string | null,
      _withdrawalAmount?: null,
      _scheduleIndex?: null
    ): ClaimedEventFilter;

    "FeeReceived(address,uint256,uint256,address)"(
      _recipient?: string | null,
      _feeAmount?: null,
      _scheduleIndex?: null,
      _tokenAddress?: null
    ): FeeReceivedEventFilter;
    FeeReceived(
      _recipient?: string | null,
      _feeAmount?: null,
      _scheduleIndex?: null,
      _tokenAddress?: null
    ): FeeReceivedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    amountAvailableToWithdrawByAdmin(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feePercent(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    finalClaimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalVestedAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaim(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLeaf(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevoked(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeClaim(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFee(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    totalWithdrawnAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateFeeReceiver(
      _newReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateconversionThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    verify(
      proof: BytesLike[],
      leaf: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestedAmount(
      _claimInput: ClaimInputStruct,
      _referenceTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountAvailableToWithdrawByAdmin(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalClaimableAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalVestedAmount(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaim(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeaf(
      _claimInput: ClaimInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevoked(
      _recipient: string,
      _scheduleIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeClaim(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFee(
      _feePercent: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      _root: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWithdrawnAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateFeeReceiver(
      _newReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateconversionThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verify(
      proof: BytesLike[],
      leaf: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestedAmount(
      _claimInput: ClaimInputStruct,
      _referenceTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _claimInput: ClaimInputStruct,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
